// Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of NVIDIA CORPORATION nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package triton.backend.python;

message InitializationCommand
{
  message ValuePair
  {
    string key = 1;
    string value = 2;
  }

  repeated ValuePair args = 1;
}

message Tensor
{
  string name = 1;
  int32 dtype = 2;
  repeated int64 dims = 3;
  bytes raw_data = 4;
}

message InferenceRequest
{
  string id = 1;
  uint64 correlation_id = 2;
  repeated Tensor inputs = 3;
  repeated string requested_output_names = 4;
}

message Error
{
  string message = 1;
}

message InferenceResponse
{
  Error error = 1;
  bool failed = 2;
  repeated Tensor outputs = 3;
}

message ExecuteResponse
{
  repeated InferenceResponse responses = 1;
}

message ExecuteRequest
{
  repeated InferenceRequest requests = 1;
}

message Empty {}

service PythonInterpreter
{
  rpc Init(InitializationCommand) returns (Empty) {}
  rpc Fini(Empty) returns (Empty) {}
  rpc Execute(ExecuteRequest) returns (ExecuteResponse) {}
}
